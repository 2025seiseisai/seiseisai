// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  id                  String         @id @default(cuid())
  name                String         @unique
  authorityAdmins     Boolean        @default(false)
  authorityNews       Boolean        @default(false)
  authorityGoods      Boolean        @default(false)
  authorityGoodsStock Boolean        @default(false)
  authorityTickets    Boolean        @default(false)
  password            AdminPassword?
}

model AdminPassword {
  adminId        String @id
  hashedPassword String
  admin          Admin  @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model News {
  id         String   @id @default(cuid())
  title      String
  date       DateTime @default(now())
  importance Boolean  @default(false)
  content    String   @db.Text
}

enum GoodsStock {
  売り切れ
  残りわずか
  在庫少なめ
  在庫あり
}

model Goods {
  id    String     @id @default(cuid())
  name  String     @unique
  stock GoodsStock @default(在庫あり)
}

enum EventTicketType {
  個人制 // 1枚の紙の整理券で1人が参加可能 (同伴者も整理券が必要)
  参加者制 // 1枚の紙の整理券で参加者1人が参加可能 (同伴者は整理券不要)
  グループ制 // 1枚の紙の整理券で1グループ(最大5人まで)が参加可能
}

model EventTicketInfo {
  id                  String            @id
  name                String            @unique
  link                String // イベントのリンク (なければ空文字列)
  applicationStart    DateTime // 応募の開始時刻
  applicationEnd      DateTime // 応募の終了時刻 (応募開始時刻より後)
  exchangeEnd         DateTime // 紙の整理券の引き換え終了時刻 (応募終了時刻より後)
  capacity            Int // 定員 (1以上)
  paperTicketsPerUser Int // 1人あたりの紙の整理券の応募可能枚数 (1以上)
  type                EventTicketType // 整理券の種類
  tickets             Ticket[]
  drawResults         EventDrawResults?
}

model EventDrawResults {
  eventId           String          @id
  totalApplications Int // 総応募数 (0以上)
  winners           Int // 当選者数 (0以上、定員以下)
  event             EventTicketInfo @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model TicketUser {
  id                    String   @id
  banned                Boolean // 抽選・応募資格停止
  expiresAt             DateTime // 有効期限 (通常、菁々祭当日の23:59:59)
  remainingApplications Int // 残り応募可能回数 (0以上)
  tickets               Ticket[]
}

enum TicketStatus {
  抽選待ち
  当選
  落選
}

model Ticket {
  id           String          @id
  paperTickets Int // 引き換えする紙の整理券の枚数
  userId       String
  eventId      String
  status       TicketStatus
  user         TicketUser      @relation(fields: [userId], references: [id], onDelete: Cascade)
  event        EventTicketInfo @relation(fields: [eventId], references: [id], onDelete: Cascade)
}
