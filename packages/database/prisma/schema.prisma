// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  id                  String         @id @default(cuid())
  name                String         @unique
  authorityAdmins     Boolean        @default(false)
  authorityNews       Boolean        @default(false)
  authorityGoods      Boolean        @default(false)
  authorityGoodsStock Boolean        @default(false)
  authorityTickets    Boolean        @default(false)
  password            AdminPassword?
}

model AdminPassword {
  adminId        String @id
  hashedPassword String
  admin          Admin  @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model News {
  id         String   @id @default(cuid())
  title      String
  date       DateTime @default(now())
  importance Boolean  @default(false)
  content    String   @db.Text
}

enum GoodsStock {
  売り切れ
  残りわずか
  在庫少なめ
  在庫あり
}

model Goods {
  id    String     @id @default(cuid())
  name  String     @unique
  stock GoodsStock @default(在庫あり)
}

model TicketEvent {
  id                 String   @id
  name               String   @unique
  link               String // イベントのリンク (なければ空文字列)
  description        String   @db.Text // イベントの説明 (なければ空文字列)
  applicationStart   DateTime // 抽選の開始時刻
  applicationEnd     DateTime // 抽選の終了時刻
  exhangeStart       DateTime // 紙の整理券の引き換え開始時刻
  exchangeEnd        DateTime // 紙の整理券の引き換え終了時刻
  capacity           Int // 定員 (紙の整理券の枚数)
  maxPeoplePerTicket Int // 1枚のWeb整理券で入場できる人数
  drawed             Boolean // 既に抽選が行われたかどうか
  Ticket             Ticket[]
}

model TicketUser {
  id     String   @id
  banned Boolean
  Ticket Ticket[]
}

enum TicketStatus {
  抽選待ち
  当選
  落選
  使用済み
}

model Ticket {
  id             String       @id
  numberOfPeople Int
  userId         String
  eventId        String
  status         TicketStatus
  user           TicketUser   @relation(fields: [userId], references: [id], onDelete: Cascade)
  event          TicketEvent  @relation(fields: [eventId], references: [id], onDelete: Cascade)
}
