// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  id                          String         @id @default(cuid())
  name                        String         @unique
  authorityAdmins             Boolean        @default(false)
  authorityNews               Boolean        @default(false)
  authorityGoods              Boolean        @default(false)
  authorityGoodsStock         Boolean        @default(false)
  authorityTickets            Boolean        @default(false)
  authorityUserAuthentication Boolean        @default(false)
  authorityTicketVerification Boolean        @default(false)
  password                    AdminPassword?
}

model AdminPassword {
  adminId        String @id
  hashedPassword String
  admin          Admin  @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model News {
  id         String   @id @default(cuid())
  title      String
  date       DateTime @default(now())
  importance Boolean  @default(false)
  content    String   @db.Text
}

enum GoodsStock {
  売り切れ
  残りわずか
  在庫少なめ
  在庫あり
}

model Goods {
  id    String     @id @default(cuid())
  name  String     @unique
  stock GoodsStock @default(在庫あり)
}

enum EventTicketType {
  個人制
  参加者制
  グループ制
}

model EventTicketInfo {
  id                  String           @id
  name                String           @unique
  link                String
  applicationStart    DateTime
  applicationEnd      DateTime
  eventStart          DateTime
  eventEnd            DateTime
  capacity            Int
  paperTicketsPerUser Int
  type                EventTicketType
  tickets             Ticket[]
  drawResult          EventDrawResult?
}

model EventDrawResult {
  eventId           String          @id
  totalApplications Int
  winners           Int
  event             EventTicketInfo @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model TicketUser {
  id                    String   @id
  banned                Boolean  @default(false)
  expiresAt             DateTime
  applicationsSubmitted Int      @default(0)
  tickets               Ticket[]
}

enum TicketStatus {
  抽選待ち
  当選
  落選
}

model Ticket {
  id           String          @id
  paperTickets Int // 引き換えする紙の整理券の枚数
  userId       String
  eventId      String
  status       TicketStatus
  user         TicketUser      @relation(fields: [userId], references: [id], onDelete: Cascade)
  event        EventTicketInfo @relation(fields: [eventId], references: [id], onDelete: Cascade)
}
